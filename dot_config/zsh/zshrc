# üì∫ ZSH setup
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

export CONFIG_HOME="$HOME/.config"
# allows you to use commands in your prompt that are dynamically evaluated each time the prompt is displayed.
setopt prompt_subst
# allows zsh to use bash like completion scripts
autoload bashcompinit && bashcompinit
# initilize zshrc completion system
autoload -Uz compinit
# initilize autocomolete
compinit
# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

#üîë bindings
bindkey '^q' autosuggest-execute
bindkey '^w' autosuggest-accept
bindkey '^y' autosuggest-toggle

#üîç bindings
# <c-r> # Search command history
# <c-t>	# Fuzzy find files
# <c-e> # Fuzzy find directories
bindkey '^e' fzf-cd-widget

#üóÑÔ∏è better history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
# Append history instead of overwriting
setopt APPEND_HISTORY
# Immediately append commands to the history file
setopt INC_APPEND_HISTORY
# Share history across all sessions
setopt SHARE_HISTORY
# Ignore duplicate commands in the history
setopt HIST_IGNORE_ALL_DUPS
# Remove unnecessary blanks from commands in the history
setopt HIST_REDUCE_BLANKS
# Remove command lines beginning with a space from history
setopt hist_ignore_space

# Disables the audible beep when list ambiguous completions
setopt NO_LIST_BEEP
# Activates spelling correction for commands.
setopt CORRECT
# sort files in a numerically logical order instead of pure lexicographical
setopt numeric_glob_sort

#üñ•Ô∏è zsh settings
ZSH_THEME="spaceship"

#‚ö†Ô∏èjira plugins require setup https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jira
plugins=(chezmoi fzf mise alias-finder aliases aws common-aliases gradle docker mvn docker-compose gpg-agent jira kubectl python rust safe-paste spring sublime fzf-tab)

#üöÄ spaceship settings
SPACESHIP_TIME_SHOW=true
SPACESHIP_EXIT_CODE_SHOW=true
SPACESHIP_KUBECTL_SHOW=true

# configure autoload 
zstyle ':omz:plugins:alias-finder' autoload yes
# make completion case insestive
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group ',' '.'
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
# make it working with tmux
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

# üöÄ loat ohmyzsh setting
source $ZSH/oh-my-zsh.sh

# make sure that pygmentize is not used by any alias
alias_p="P"
unalias $alias_p

#üóíÔ∏è source aliases 
source $CONFIG_HOME/zsh/alias.zshrc
#üìù Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='vim'
 else
   export EDITOR='nvim'
 fi

#üê± Set up theme Catpuccin
export BAT_THEME="Catppuccin Macchiato"
source $CONFIG_HOME/zsh/themes/catppuccin_macchiato-zsh-syntax-highlighting.zsh
export FZF_DEFAULT_OPTS=" \
	--color=bg+:#363a4f,bg:#24273a,spinner:#f4dbd6,hl:#ed8796 \
	--color=fg:#cad3f5,header:#ed8796,info:#c6a0f6,pointer:#f4dbd6 \
	--color=marker:#b7bdf8,fg+:#cad3f5,prompt:#c6a0f6,hl+:#ed8796 \
	--color=selected-bg:#494d64 \
	--color=border:#363a4f,label:#cad3f5"
export EXA_COLORS="catppuccin"

# Enable fzf keybindings and completion
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

#üçª Source brew 
source $CONFIG_HOME/zsh/brew.zshrc

#üåà sytnax higlight setup 
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh

#üëæ usefull comands setup
dd_excluded(){
	DIRS_TO_EXCLUDE=(".git" ".mvn" ".conf" ".cache" ".m2" ".docker" ".Trash" ".hawtjni" ".iterm2" ".oh-my-zsh" ".tldr" ".local")
	EXCLUDE_OPTION="--exclude"
	EXCLUDE_LIST=""
	for path in "${DIRS_TO_EXCLUDE[@]}"; do
		EXCLUDE_LIST+=" $EXCLUDE_OPTION $path"
	done
	echo $EXCLUDE_LIST
}
dd_fd_command_directory() {
	local exclude=$(dd_excluded)
	echo "fd --type d --hidden $exclude"
}
dd_fd_command_files() {
	local exclude=$(dd_excluded)
	echo "fd --type f --hidden $exclude"
}

cx() { cd "$@" && lg; }
fls() { cd "$(eval $(dd_fd_command_directory) | fzf)" && l; }
fp() { echo "$(eval $(dd_fd_command_files) | fzf)" | pbcopy }
fv() { nvim "$(eval $(dd_fd_command_files) | fzf)" }
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

eval "$(zoxide init zsh)"
eval "$(mise activate zsh)"
